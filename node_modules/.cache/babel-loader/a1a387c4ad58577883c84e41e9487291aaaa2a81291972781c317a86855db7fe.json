{"ast":null,"code":"import _objectSpread from\"/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";import React,{useState}from\"react\";import{ScoreBoard}from\"../components/ScoreBoard\";import{NumberPlayer}from\"../components/NumberPlayer\";import{Board}from\"../components/Board\";import{RedoButton}from\"../components/RedoButton\";import{ResetAndRestart}from\"../components/ResetAndRestart\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Home=function Home(){var win_combinations=[[0,1,2],[0,3,6],[0,4,8],[6,7,8],[2,5,8],[3,4,5],[1,4,7],[2,4,6]];function getOpponent(player){return player===\"X\"?\"O\":\"X\";}//Limits\nvar inf=1000000000;var ninf=-1000000000;var MaxNode=/*#__PURE__*/function(){function MaxNode(state,player,main_player){var parent_beta=arguments.length>3&&arguments[3]!==undefined?arguments[3]:inf;_classCallCheck(this,MaxNode);this.main_player=main_player;this.parent_beta=parent_beta;this.player=player;this.opponent=getOpponent(this.player);this.alpha=ninf;this.state=_toConsumableArray(state);//Deep Copy\nthis.final_state=Array(9).fill(null);this.n=this.state.length;this.createBranches();//Tree is Created Here\n}_createClass(MaxNode,[{key:\"copyArray\",value:function copyArray(array1,array2){for(var i=0;i<array1.length;i++){array1[i]=array2[i];}}},{key:\"allDone\",value:function allDone(state){for(var i=0;i<9;i++){if(state[i]===null){return false;}}return true;}//if player wins then return 1, 1 for opponent wins and 0 if draw\n},{key:\"checkWin\",value:function checkWin(arry,player){var nArr=[];var arr=_toConsumableArray(arry);while(arr.length>0){nArr.push(arr.splice(0,3));}var state=[].concat(nArr);for(var i=0;i<3;i++){if(state[i][0]===state[i][1]&&state[i][1]===state[i][2]){if(state[i][0]===getOpponent(player)){return-1;}if(state[i][0]===player){return 1;}}}for(var _i=0;_i<3;_i++){if(state[0][_i]===state[1][_i]&&state[1][_i]===state[2][_i]){if(state[0][_i]===getOpponent(player)){return-1;}if(state[0][_i]===player){return 1;}}}//checking diagnols\n//top left - bottom right\nif(state[0][0]===state[1][1]&&state[1][1]===state[2][2]){if(state[0][0]===getOpponent(player)){return-1;}if(state[0][0]===player){return 1;}}//top right - bottom left\nif(state[0][2]===state[1][1]&&state[2][0]===state[1][1]){if(state[0][2]===getOpponent(player)){return-1;}if(state[0][2]===player){return 1;}}return 0;}},{key:\"createBranches\",value:function createBranches(){if(this.allDone(this.state)){this.final_state=_toConsumableArray(this.state);this.alpha=this.checkWin(this.state,this.main_player);return this.alpha;}var temp=_toConsumableArray(this.state);for(var i=0;i<9;i++){//Pruning happens when current alpha is greater than the parent beta\nif(this.parent_beta<this.alpha){return this.alpha;}//Exploring the new search trees\nif(temp[i]===null){temp[i]=this.player;//Making New Move\n//Best Case Scenario\nvar win_=this.checkWin(temp,this.main_player);if(win_===1){this.alpha=1;this.final_state=_toConsumableArray(temp);temp[i]=null;//Removing the introduced Move\nreturn this.alpha;}var minnode=new MinNode(temp,this.opponent,this.main_player,this.alpha);if(minnode.beta>this.alpha){this.alpha=minnode.beta;this.final_state=_toConsumableArray(temp);}temp[i]=null;//Removing the introduced Move\n}}return this.alpha;}}]);return MaxNode;}();var MinNode=/*#__PURE__*/function(){function MinNode(state,player,main_player){var parent_alpha=arguments.length>3&&arguments[3]!==undefined?arguments[3]:ninf;_classCallCheck(this,MinNode);this.main_player=main_player;this.parent_alpha=parent_alpha;this.player=player;this.opponent=getOpponent(this.player);this.beta=inf;this.state=_toConsumableArray(state);this.final_state=Array(9).fill(null);this.n=this.state.length;this.createBranches();}_createClass(MinNode,[{key:\"copyArray\",value:function copyArray(array1,array2){for(var i=0;i<array1.length;i++){array1[i]=array2[i];}}},{key:\"allDone\",value:function allDone(state){for(var i=0;i<9;i++){if(state[i]===null){return false;}}return true;}//if player wins then return 1, 1 for opponent wins and 0 if draw\n},{key:\"checkWin\",value:function checkWin(arry,player){var arr=_toConsumableArray(arry);var nArr=[];while(arr.length>0){nArr.push(arr.splice(0,3));}var state=nArr;for(var i=0;i<3;i++){if(state[i][0]===state[i][1]&&state[i][1]===state[i][2]){if(state[i][0]===getOpponent(player)){return-1;}if(state[i][0]===player){return 1;}}}for(var _i2=0;_i2<3;_i2++){if(state[0][_i2]===state[1][_i2]&&state[1][_i2]===state[2][_i2]){if(state[0][_i2]===getOpponent(player)){return-1;}if(state[0][_i2]===player){return 1;}}}//checking diagnols\n//top left - bottom right\nif(state[0][0]===state[1][1]&&state[1][1]===state[2][2]){if(state[0][0]===getOpponent(player)){return-1;}if(state[0][0]===player){return 1;}}//top right - bottom left\nif(state[0][2]===state[1][1]&&state[2][0]===state[1][1]){if(state[0][2]===getOpponent(player)){return-1;}if(state[0][2]===player){return 1;}}return 0;}},{key:\"createBranches\",value:function createBranches(){if(this.allDone(this.state)){this.final_state=_toConsumableArray(this.state);this.beta=this.checkWin(this.state,this.main_player);return this.beta;}var temp=_toConsumableArray(this.state);for(var i=0;i<9;i++){//Pruning happens when current beta is less than the parent alpha or alphas of all the alpha nodes\nif(this.parent_alpha>this.beta){return this.beta;}//Exploring the new search trees\nif(temp[i]===null){temp[i]=this.player;//Making New Move\nvar win_=this.checkWin(temp,this.main_player);if(win_===-1){this.beta=-1;this.final_state=_toConsumableArray(temp);temp[i]=null;//Removing the introduced Move\nreturn this.beta;}var maxnode=new MaxNode(temp,this.opponent,this.main_player,this.beta);temp[i]=null;//Removing the introduced Move\nif(maxnode.alpha<this.beta){this.beta=maxnode.alpha;this.final_state=_toConsumableArray(temp);}}}return this.beta;}}]);return MinNode;}();var _useState=useState(true),_useState2=_slicedToArray(_useState,2),is_x_playing=_useState2[0],setXPlaying=_useState2[1];var _useState3=useState(Array(9).fill(null)),_useState4=_slicedToArray(_useState3,2),board=_useState4[0],setBoard=_useState4[1];var _useState5=useState({x_score:0,o_score:0}),_useState6=_slicedToArray(_useState5,2),scores=_useState6[0],setScores=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),is_game_over=_useState8[0],setGameOver=_useState8[1];var _useState9=useState(1),_useState10=_slicedToArray(_useState9,2),turns=_useState10[0],setTurns=_useState10[1];var _useState11=useState(Array(9).fill(null)),_useState12=_slicedToArray(_useState11,2),last_board=_useState12[0],setLastBoard=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),is_one_player=_useState14[0],setOnePlayer=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),next=_useState16[0],setNext=_useState16[1];var mainBoardHandling=function mainBoardHandling(boxIdx){//2-Player Game\nif(is_one_player===false){setLastBoard(board);// Update the board\nvar updatedBoard=board.map(function(value,idx){if(idx===boxIdx){return is_x_playing?\"X\":\"O\";}else{return value;}});//Check for winner and update the score\nvar winner=checkForWinner(updatedBoard);if(winner){if(winner===\"O\"){var o_score=scores.o_score;o_score+=1;setScores(_objectSpread(_objectSpread({},scores),{},{o_score:o_score}));}else{var x_score=scores.x_score;x_score+=1;setScores(_objectSpread(_objectSpread({},scores),{},{x_score:x_score}));}alert(\"Winner : \".concat(winner,\" !! Player - \").concat(winner,\" won the round!!\"));//if(is_one_player === true) setXPlaying(true);\nsetTimeout(nextRound(),3000);return;}else{//check if all boxes are filled and there is draw\nif(turns===9)if(is_game_over===false){setTurns(1);//if(is_one_player === true) setXPlaying(true);\nsetGameOver(true);alert(\"Tie : The Game is Draw !!\");setTimeout(nextRound(),3000);return;}}setBoard(updatedBoard);var count=turns+1;setTurns(count);//Alternating the player\nsetXPlaying(!is_x_playing);}//1-Player Game (Human Vs AI)\nelse{//Human Vs AI Mode\nif(is_game_over===false){//Human (X's Turn)\nif(is_x_playing===true){setLastBoard(board);// Update the board\nvar _updatedBoard=board.map(function(value,idx){if(idx===boxIdx){return is_x_playing?\"X\":\"O\";}else{return value;}});//Check for winner and update the score\nvar _winner=checkForWinner(_updatedBoard);var _count=turns;if(_winner){if(_winner===\"O\"){var _o_score=scores.o_score;_o_score+=1;setScores(_objectSpread(_objectSpread({},scores),{},{o_score:_o_score}));}else{var _x_score=scores.x_score;_x_score+=1;setScores(_objectSpread(_objectSpread({},scores),{},{x_score:_x_score}));}if(is_game_over===false)alert(\"Winner : \".concat(_winner,\" !! Player - \").concat(_winner,\" won the round!!\"));setTurns(1);setGameOver(true);setXPlaying(true);setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));setTimeout(nextRound(),1000);return;}else{//check if all boxes are filled and there is draw\nif(_count>=9&&allDone(_updatedBoard)){//if (is_game_over === false)\nsetTurns(1);setXPlaying(true);setGameOver(true);setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));alert(\"Tie : The Game is Draw !!\");setTimeout(nextRound(),1000);return;}}//AI's Turn\n//Getting the current game configuration/state or tic-tac-toe board matrix\nvar temp=_toConsumableArray(_updatedBoard);//Create Game Search Tree - MiniMax Algorithm (Alpha-Beta Pruning)\n/* O (AI) is the main player here, and also the root maxnode will play on behalf of Player O\n            In Tree, Max Nodes will be player O (Computer) and Min Nodes will represent X (Human)\n          */ // Creating the root maxnode for the Player O (Computer) \n// Whole game will be monitored on behalf of main player which is O (Computer) here\n// If in any node of the tree if O wins then node returns 1, if O lose then returns -1,\n// If neither win/lose and there are moves to explore then it create new branch\n// If neither win/lose and there are NO moves to explore then node will return 0\nvar maxnode=new MaxNode(temp,\"O\",\"O\",inf);//Accessing the best move from the decision tree\nvar updatedBoardai=_toConsumableArray(maxnode.final_state);setBoard(updatedBoardai);_count=_count+2;//Alternating the player\nsetXPlaying(is_x_playing);setNext(false);setBoard(updatedBoardai);setTurns(_count);//Check for winner and update the score\n_winner=checkForWinner(updatedBoardai);if(_winner){if(_winner===\"O\"){var _o_score2=scores.o_score;_o_score2+=1;setScores(_objectSpread(_objectSpread({},scores),{},{o_score:_o_score2}));}else{var _x_score2=scores.x_score;_x_score2+=1;setScores(_objectSpread(_objectSpread({},scores),{},{x_score:_x_score2}));}setGameOver(true);setTurns(1);setXPlaying(true);if(is_game_over===false)alert(\"Winner : \".concat(_winner,\" !! Player - \").concat(_winner,\" won the round!!\"));setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));setTimeout(nextRound(),1000);return;}else{//check if all boxes are filled and there is draw\nif(_count>=9&&allDone(updatedBoardai)){setTurns(1);setXPlaying(true);setGameOver(true);setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));alert(\"Tie : The Game is Draw !!\");setTimeout(nextRound(),1000);return;}}}}}};var allEmpty=function allEmpty(){for(var i=0;i<board.length;i++){if(board[i]===\"X\"||board[i]===\"O\"){return false;}}return true;};var allDone=function allDone(inp_board){for(var i=0;i<inp_board.length;i++){if(!(inp_board[i]===\"X\"||inp_board[i]===\"O\")){return false;}}return true;};var equalArray=function equalArray(array1,array2){if(!(array1.length===array2.length)){return false;}for(var i=0;i<array1.length;i++){if(!(array1[i]===array2[i])){return false;}}return true;};var restartGame=function restartGame(){var conf_msg=\"Do you want to restart the game??\";if(!window.confirm(conf_msg)){return;}//if (is_one_player === true) setXPlaying(true);\nsetTurns(1);setGameOver(false);setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));setScores({x_score:0,o_score:0});};var resetBoard=function resetBoard(){var conf_msg=\"Do you want to reset the Board??\";if(!window.confirm(conf_msg)){return;}//if (is_one_player === true) setXPlaying(true);\nsetTurns(1);setGameOver(false);setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));};var nextRound=function nextRound(){setTurns(1);if(is_one_player===true)setXPlaying(true);setGameOver(false);setBoard(Array(9).fill(null));setLastBoard(Array(9).fill(null));};var checkForWinner=function checkForWinner(board){for(var i=0;i<win_combinations.length;i++){var _win_combinations$i=_slicedToArray(win_combinations[i],3),x=_win_combinations$i[0],y=_win_combinations$i[1],z=_win_combinations$i[2];// Iterate through win conditions and check if either player satisfies them\nif(board[x]&&board[x]===board[y]&&board[y]===board[z]){setTurns(1);setGameOver(true);return board[x];}}};var redo=function redo(){if(!equalArray(board,last_board)){setTurns(turns-(is_one_player?2:1));setBoard(last_board);if(is_one_player===false){setOnePlayer(is_one_player);if(!allEmpty())setXPlaying(!is_x_playing);}}};var changeMode=function changeMode(){setXPlaying(true);setOnePlayer(!is_one_player);restartGame();};return/*#__PURE__*/_jsxs(\"div\",{className:\"Home\",children:[/*#__PURE__*/_jsx(ScoreBoard,{scores:scores,is_x_playing:is_x_playing}),/*#__PURE__*/_jsx(NumberPlayer,{mode:is_one_player,changeMode:changeMode}),/*#__PURE__*/_jsx(Board,{board:board,one_player:is_one_player,x_playing:is_x_playing,game_over:is_game_over,next_:next,onClick:is_game_over?resetBoard:mainBoardHandling}),/*#__PURE__*/_jsx(RedoButton,{redo:redo}),/*#__PURE__*/_jsx(ResetAndRestart,{resetBoard:resetBoard,restartGame:restartGame})]});};/*\nconst mainBoardHandling = (boxIdx) => {\n    //2-Player Game\n    if (is_one_player === false) {\n      setLastBoard(board);\n      // Update the board\n      const updatedBoard = board.map((value, idx) => {\n        if (idx === boxIdx) {\n          return is_x_playing ? \"X\" : \"O\";\n        } else {\n          return value;\n        }\n      });\n\n      //Check for winner and update the score\n      let winner = checkForWinner(updatedBoard);\n\n      if (winner) {\n        if (winner === \"O\") {\n          let { o_score } = scores;\n          o_score += 1;\n          setScores({ ...scores, o_score });\n        } else {\n          let { x_score } = scores;\n          x_score += 1;\n          setScores({ ...scores, x_score });\n        }\n        alert(`Player - ${winner} won the round ;)`);\n        //if(is_one_player === true) setXPlaying(true);\n        setTimeout(nextRound(), 3000);\n        return;\n      } else {\n        //check if all boxes are filled and there is draw\n        if (turns === 9)\n          if (is_game_over === false) {\n            setTurns(1);\n            //if(is_one_player === true) setXPlaying(true);\n            setGameOver(true);\n            alert(`Draw :0`);\n            setTimeout(nextRound(), 3000);\n            return;\n          }\n      }\n\n      setBoard(updatedBoard);\n      const count = turns + 1;\n      setTurns(count);\n\n      //Alternating the player\n      setXPlaying(!is_x_playing);\n    } \n    //1-Player Game (Human Vs AI)\n    else {\n      if(is_game_over === false){\n        //Human (X's Turn)\n        if (is_x_playing === true  ) {\n          setLastBoard(board);\n          // Update the board\n          const updatedBoard = board.map((value, idx) => {\n            if (idx === boxIdx) {\n              return is_x_playing ? \"X\" : \"O\";\n            } else {\n              return value;\n            }\n          });\n\n          //Check for winner and update the score\n          let winner = checkForWinner(updatedBoard);\n\n          if (winner) {\n            if (winner === \"O\") {\n              let { o_score } = scores;\n              o_score += 1;\n              setScores({ ...scores, o_score });\n            } else {\n              let { x_score } = scores;\n              x_score += 1;\n              setScores({ ...scores, x_score });\n            }\n            if(is_game_over === false)\n              alert(`Player - ${winner} won the round ;) XX`);\n            setTurns(1);\n            setGameOver(true);\n            setXPlaying(true);\n            setBoard(Array(9).fill(null));\n            setLastBoard(Array(9).fill(null));\n            setTimeout(nextRound(), 1000);\n            return;\n          } else {\n            //check if all boxes are filled and there is draw\n            if (turns === 9)\n              if (is_game_over === false) {\n                setTurns(1);\n                setXPlaying(true);\n                setGameOver(true);\n                setBoard(Array(9).fill(null));\n                setLastBoard(Array(9).fill(null));\n                alert(`Draw :0`);\n                setTimeout(nextRound(), 1000);\n                return;\n              }\n          }\n\n          setBoard(updatedBoard);\n          const count = turns + 1;\n          setTurns(count);\n\n          //Alternating the player\n          setXPlaying(!is_x_playing);\n\n          setNext(true);\n        } \n        \n        else {\n          //AI's Turn\n          if (turns !== 9 && is_x_playing === false && next === true) {\n            //Getting the current game configuration/state or tic-tac-toe board matrix\n            let temp = [...board];\n\n            //Create Game Search Tree - MiniMax Algorithm (Alpha-Beta Pruning)\n            /* O (AI) is the main player here, and also the root maxnode will play on behalf of Player O\n              In Tree, Max Nodes will be player O (Computer) and Min Nodes will represent X (Human)\n            */ // Creating the root maxnode for the Player O (Computer) \n// Whole game will be monitored on behalf of main player which is O (Computer) here\n// If in any node of the tree if O wins then node returns 1, if O lose then returns -1,\n// If neither win/lose and there are moves to explore then it create new branch\n// If neither win/lose and there are NO moves to explore then node will return 0\n/*\n\n            let maxnode = new MaxNode(temp, \"O\", \"O\", inf);\n            \n            //Accessing the best move from the decision tree\n            const updatedBoardai = [...maxnode.final_state]; \n\n            const count = turns + 1;\n            setTurns(count);\n            //Check for winner and update the score\n            const winner = checkForWinner(updatedBoardai);\n            setNext(false);\n            if (winner) {\n              if (winner === \"O\") {\n                let { o_score } = scores;\n                o_score += 1;\n                setScores({ ...scores, o_score });\n              } else {\n                let { x_score } = scores;\n                x_score += 1;\n                setScores({ ...scores, x_score });\n              }\n              setGameOver(true);\n              setTurns(1);\n              setXPlaying(true);\n              if(is_game_over === false && is_x_playing === false && !isEmpty(board) ){\n                alert(`Player - ${winner} won the round ;)OO`+board.toString());\n              }\n              setBoard(Array(9).fill(null));\n              setLastBoard(Array(9).fill(null));\n              \n              setTimeout(nextRound(), 1000);\n              return;\n            } else {\n              //check if all boxes are filled and there is draw\n              if (turns === 9)\n                if (is_game_over === false) {\n                  setTurns(1);\n                  setXPlaying(true);\n                  setGameOver(true);\n                  setBoard(Array(9).fill(null));\n                  setLastBoard(Array(9).fill(null));\n                  alert(`Draw :0AI`);\n                  setTimeout(nextRound(), 1000);\n                  return;\n                }\n            }\n\n            setBoard(updatedBoardai);\n            setTurns(turns + 1);\n\n            //Alternating the player\n            setXPlaying(!is_x_playing);\n            \n          }\n        }\n      }\n    }\n  };\n\n*/","map":{"version":3,"names":["React","useState","ScoreBoard","NumberPlayer","Board","RedoButton","ResetAndRestart","jsx","_jsx","jsxs","_jsxs","Home","win_combinations","getOpponent","player","inf","ninf","MaxNode","state","main_player","parent_beta","arguments","length","undefined","_classCallCheck","opponent","alpha","_toConsumableArray","final_state","Array","fill","n","createBranches","_createClass","key","value","copyArray","array1","array2","i","allDone","checkWin","arry","nArr","arr","push","splice","concat","temp","win_","minnode","MinNode","beta","parent_alpha","maxnode","_useState","_useState2","_slicedToArray","is_x_playing","setXPlaying","_useState3","_useState4","board","setBoard","_useState5","x_score","o_score","_useState6","scores","setScores","_useState7","_useState8","is_game_over","setGameOver","_useState9","_useState10","turns","setTurns","_useState11","_useState12","last_board","setLastBoard","_useState13","_useState14","is_one_player","setOnePlayer","_useState15","_useState16","next","setNext","mainBoardHandling","boxIdx","updatedBoard","map","idx","winner","checkForWinner","_objectSpread","alert","setTimeout","nextRound","count","updatedBoardai","allEmpty","inp_board","equalArray","restartGame","conf_msg","window","confirm","resetBoard","_win_combinations$i","x","y","z","redo","changeMode","className","children","mode","one_player","x_playing","game_over","next_","onClick"],"sources":["/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { ScoreBoard } from \"../components/ScoreBoard\";\nimport { NumberPlayer } from \"../components/NumberPlayer\";\nimport { Board } from \"../components/Board\";\nimport { RedoButton } from \"../components/RedoButton\";\nimport { ResetAndRestart } from \"../components/ResetAndRestart\";\nexport const Home = () => {\n  const win_combinations = [\n    [0, 1, 2],\n    [0, 3, 6],\n    [0, 4, 8],\n    [6, 7, 8],\n    [2, 5, 8],\n    [3, 4, 5],\n    [1, 4, 7],\n    [2, 4, 6]\n  ];\n\n  function getOpponent(player) {\n    return player === \"X\" ? \"O\" : \"X\";\n  }\n  //Limits\n  const inf = 1000000000;\n  const ninf = -1000000000;\n\n  class MaxNode {\n    constructor(state, player, main_player, parent_beta = inf) {\n      this.main_player = main_player;\n      this.parent_beta = parent_beta;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.alpha = ninf;\n      this.state = [...state];//Deep Copy\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches(); //Tree is Created Here\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let nArr = [];\n      let arr = [...arry];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = [...nArr];\n\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.alpha = this.checkWin(this.state, this.main_player);\n        return this.alpha;\n      }\n\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current alpha is greater than the parent beta\n        if (this.parent_beta < this.alpha) {\n          return this.alpha;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          //Best Case Scenario\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === 1) {\n            this.alpha = 1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.alpha;\n          }\n\n          let minnode = new MinNode(temp,this.opponent,this.main_player,this.alpha);\n\n          if (minnode.beta > this.alpha) {\n            this.alpha = minnode.beta;\n            this.final_state = [...temp];\n          }\n          temp[i] = null; //Removing the introduced Move\n        }\n      }\n      return this.alpha;\n    }\n  }\n\n  class MinNode {\n    constructor(state, player, main_player, parent_alpha = ninf) {\n      this.main_player = main_player;\n      this.parent_alpha = parent_alpha;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.beta = inf;\n      this.state = [...state];\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches();\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let arr = [...arry];\n      let nArr = [];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = nArr;\n\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.beta = this.checkWin(this.state, this.main_player);\n        return this.beta;\n      }\n\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current beta is less than the parent alpha or alphas of all the alpha nodes\n        if (this.parent_alpha > this.beta) {\n          return this.beta;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === -1) {\n            this.beta = -1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.beta;\n          }\n\n          let maxnode = new MaxNode(\n            temp,\n            this.opponent,\n            this.main_player,\n            this.beta\n          );\n\n          temp[i] = null; //Removing the introduced Move\n          if (maxnode.alpha < this.beta) {\n            this.beta = maxnode.alpha;\n            this.final_state = [...temp];\n          }\n        }\n      }\n      return this.beta;\n    }\n  }\n  const [is_x_playing, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({ x_score: 0, o_score: 0 });\n  const [is_game_over, setGameOver] = useState(false);\n  const [turns, setTurns] = useState(1);\n  const [last_board, setLastBoard] = useState(Array(9).fill(null));\n  const [is_one_player, setOnePlayer] = useState(false);\n  const [next, setNext] = useState(false);\n\n  const mainBoardHandling = (boxIdx) => {\n    //2-Player Game\n    if (is_one_player === false) {\n      setLastBoard(board);\n      // Update the board\n      const updatedBoard = board.map((value, idx) => {\n        if (idx === boxIdx) {\n          return is_x_playing ? \"X\" : \"O\";\n        } else {\n          return value;\n        }\n      });\n\n      //Check for winner and update the score\n      let winner = checkForWinner(updatedBoard);\n\n      if (winner) {\n        if (winner === \"O\") {\n          let { o_score } = scores;\n          o_score += 1;\n          setScores({ ...scores, o_score });\n        } else {\n          let { x_score } = scores;\n          x_score += 1;\n          setScores({ ...scores, x_score });\n        }\n        alert(`Winner : ${winner} !! Player - ${winner} won the round!!`);\n        //if(is_one_player === true) setXPlaying(true);\n        setTimeout(nextRound(), 3000);\n        return;\n      } else {\n        //check if all boxes are filled and there is draw\n        if (turns === 9)\n          if (is_game_over === false) {\n            setTurns(1);\n            //if(is_one_player === true) setXPlaying(true);\n            setGameOver(true);\n            alert(`Tie : The Game is Draw !!`);\n            setTimeout(nextRound(), 3000);\n            return;\n          }\n      }\n\n      setBoard(updatedBoard);\n      const count = turns + 1;\n      setTurns(count);\n\n      //Alternating the player\n      setXPlaying(!is_x_playing);\n    } \n    //1-Player Game (Human Vs AI)\n    else { //Human Vs AI Mode\n\n      if(is_game_over === false){\n        //Human (X's Turn)\n        if (is_x_playing === true) {\n          setLastBoard(board);\n          // Update the board\n          const updatedBoard = board.map((value, idx) => {\n            if (idx === boxIdx) {\n              return is_x_playing ? \"X\" : \"O\";\n            } else {\n              return value;\n            }\n          });\n\n          //Check for winner and update the score\n          let winner = checkForWinner(updatedBoard);\n          let count = turns;\n\n          if (winner) {\n            if (winner === \"O\") {\n              let { o_score } = scores;\n              o_score += 1;\n              setScores({ ...scores, o_score });\n            } else {\n              let { x_score } = scores;\n              x_score += 1;\n              setScores({ ...scores, x_score });\n            }\n            if(is_game_over === false)\n              alert(`Winner : ${winner} !! Player - ${winner} won the round!!`);\n            setTurns(1);\n            setGameOver(true);\n            setXPlaying(true);\n            setBoard(Array(9).fill(null));\n            setLastBoard(Array(9).fill(null));\n            setTimeout(nextRound(), 1000);\n            return;\n          } else {\n            //check if all boxes are filled and there is draw\n            if (count >= 9 && allDone(updatedBoard) ) {\n              //if (is_game_over === false)\n                setTurns(1);\n                setXPlaying(true);\n                setGameOver(true);\n                setBoard(Array(9).fill(null));\n                setLastBoard(Array(9).fill(null));\n                alert(`Tie : The Game is Draw !!`);\n                setTimeout(nextRound(), 1000);\n                return;\n              }\n          }\n          \n\n          //AI's Turn\n\n          //Getting the current game configuration/state or tic-tac-toe board matrix\n          let temp = [...updatedBoard];\n          \n          //Create Game Search Tree - MiniMax Algorithm (Alpha-Beta Pruning)\n          /* O (AI) is the main player here, and also the root maxnode will play on behalf of Player O\n            In Tree, Max Nodes will be player O (Computer) and Min Nodes will represent X (Human)\n          */\n          // Creating the root maxnode for the Player O (Computer) \n          // Whole game will be monitored on behalf of main player which is O (Computer) here\n          // If in any node of the tree if O wins then node returns 1, if O lose then returns -1,\n          // If neither win/lose and there are moves to explore then it create new branch\n          // If neither win/lose and there are NO moves to explore then node will return 0\n\n          let maxnode = new MaxNode(temp, \"O\", \"O\", inf);\n            \n          //Accessing the best move from the decision tree\n          let updatedBoardai = [...maxnode.final_state]; \n\n          setBoard(updatedBoardai);\n          count = count + 2;\n\n          //Alternating the player\n          setXPlaying(is_x_playing);\n          setNext(false);\n          setBoard(updatedBoardai);\n          setTurns(count);\n\n          //Check for winner and update the score\n          winner = checkForWinner(updatedBoardai);\n            if (winner) {\n              if (winner === \"O\") {\n                let { o_score } = scores;\n                o_score += 1;\n                setScores({ ...scores, o_score });\n              } else {\n                let { x_score } = scores;\n                x_score += 1;\n                setScores({ ...scores, x_score });\n              }\n              setGameOver(true);\n              setTurns(1);\n              setXPlaying(true);\n              if(is_game_over === false)\n              alert(`Winner : ${winner} !! Player - ${winner} won the round!!`);\n              setBoard(Array(9).fill(null));\n              setLastBoard(Array(9).fill(null));\n              \n              setTimeout(nextRound(), 1000);\n              return;\n            } else {\n              //check if all boxes are filled and there is draw\n              if (count >= 9 && allDone(updatedBoardai)) {\n                  setTurns(1);\n                  setXPlaying(true);\n                  setGameOver(true);\n                  setBoard(Array(9).fill(null));\n                  setLastBoard(Array(9).fill(null));\n                  alert(`Tie : The Game is Draw !!`);\n                  setTimeout(nextRound(), 1000);\n                  return;\n                }\n            }\n\n          }\n        }\n      }\n    };\n  \n\n  const allEmpty = () => {\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === \"X\" || board[i] === \"O\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const allDone = (inp_board) => {\n    for (let i = 0; i < inp_board.length; i++) {\n      if (!(inp_board[i] === \"X\" || inp_board[i] === \"O\")) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const equalArray = (array1, array2) => {\n    if (!(array1.length === array2.length)) {\n      return false;\n    }\n\n    for (let i = 0; i < array1.length; i++) {\n      if (!(array1[i] === array2[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const restartGame = () => {\n    let conf_msg = \"Do you want to restart the game??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    //if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n    setScores({ x_score: 0, o_score: 0 });\n  };\n\n  const resetBoard = () => {\n    let conf_msg = \"Do you want to reset the Board??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    //if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n\n  const nextRound = () => {\n    setTurns(1);\n    if (is_one_player === true) setXPlaying(true);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n\n  const checkForWinner = (board) => {\n    for (let i = 0; i < win_combinations.length; i++) {\n      const [x, y, z] = win_combinations[i];\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setTurns(1);\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n  const redo = () => {\n    if (!equalArray(board, last_board)) {\n      setTurns(turns - (is_one_player ? 2 : 1));\n      setBoard(last_board);\n      if (is_one_player === false) {\n        setOnePlayer(is_one_player);\n        if (!allEmpty()) setXPlaying(!is_x_playing);\n      }\n    }\n  };\n\n  const changeMode = () => {\n    setXPlaying(true);\n    setOnePlayer(!is_one_player);\n    restartGame();\n  };\n  return (\n    <div className=\"Home\">\n      <ScoreBoard scores={scores} is_x_playing={is_x_playing} />\n      <NumberPlayer mode={is_one_player} changeMode={changeMode} />\n      <Board\n        board={board}\n        one_player = {is_one_player}\n        x_playing = {is_x_playing}\n        game_over = {is_game_over}\n        next_ = {next}\n        onClick={is_game_over ? resetBoard : mainBoardHandling}\n      />\n      <RedoButton redo={redo} />\n      <ResetAndRestart resetBoard={resetBoard} restartGame={restartGame} />\n    </div>\n  );\n}\n\n\n/*\nconst mainBoardHandling = (boxIdx) => {\n    //2-Player Game\n    if (is_one_player === false) {\n      setLastBoard(board);\n      // Update the board\n      const updatedBoard = board.map((value, idx) => {\n        if (idx === boxIdx) {\n          return is_x_playing ? \"X\" : \"O\";\n        } else {\n          return value;\n        }\n      });\n\n      //Check for winner and update the score\n      let winner = checkForWinner(updatedBoard);\n\n      if (winner) {\n        if (winner === \"O\") {\n          let { o_score } = scores;\n          o_score += 1;\n          setScores({ ...scores, o_score });\n        } else {\n          let { x_score } = scores;\n          x_score += 1;\n          setScores({ ...scores, x_score });\n        }\n        alert(`Player - ${winner} won the round ;)`);\n        //if(is_one_player === true) setXPlaying(true);\n        setTimeout(nextRound(), 3000);\n        return;\n      } else {\n        //check if all boxes are filled and there is draw\n        if (turns === 9)\n          if (is_game_over === false) {\n            setTurns(1);\n            //if(is_one_player === true) setXPlaying(true);\n            setGameOver(true);\n            alert(`Draw :0`);\n            setTimeout(nextRound(), 3000);\n            return;\n          }\n      }\n\n      setBoard(updatedBoard);\n      const count = turns + 1;\n      setTurns(count);\n\n      //Alternating the player\n      setXPlaying(!is_x_playing);\n    } \n    //1-Player Game (Human Vs AI)\n    else {\n      if(is_game_over === false){\n        //Human (X's Turn)\n        if (is_x_playing === true  ) {\n          setLastBoard(board);\n          // Update the board\n          const updatedBoard = board.map((value, idx) => {\n            if (idx === boxIdx) {\n              return is_x_playing ? \"X\" : \"O\";\n            } else {\n              return value;\n            }\n          });\n\n          //Check for winner and update the score\n          let winner = checkForWinner(updatedBoard);\n\n          if (winner) {\n            if (winner === \"O\") {\n              let { o_score } = scores;\n              o_score += 1;\n              setScores({ ...scores, o_score });\n            } else {\n              let { x_score } = scores;\n              x_score += 1;\n              setScores({ ...scores, x_score });\n            }\n            if(is_game_over === false)\n              alert(`Player - ${winner} won the round ;) XX`);\n            setTurns(1);\n            setGameOver(true);\n            setXPlaying(true);\n            setBoard(Array(9).fill(null));\n            setLastBoard(Array(9).fill(null));\n            setTimeout(nextRound(), 1000);\n            return;\n          } else {\n            //check if all boxes are filled and there is draw\n            if (turns === 9)\n              if (is_game_over === false) {\n                setTurns(1);\n                setXPlaying(true);\n                setGameOver(true);\n                setBoard(Array(9).fill(null));\n                setLastBoard(Array(9).fill(null));\n                alert(`Draw :0`);\n                setTimeout(nextRound(), 1000);\n                return;\n              }\n          }\n\n          setBoard(updatedBoard);\n          const count = turns + 1;\n          setTurns(count);\n\n          //Alternating the player\n          setXPlaying(!is_x_playing);\n\n          setNext(true);\n        } \n        \n        else {\n          //AI's Turn\n          if (turns !== 9 && is_x_playing === false && next === true) {\n            //Getting the current game configuration/state or tic-tac-toe board matrix\n            let temp = [...board];\n\n            //Create Game Search Tree - MiniMax Algorithm (Alpha-Beta Pruning)\n            /* O (AI) is the main player here, and also the root maxnode will play on behalf of Player O\n              In Tree, Max Nodes will be player O (Computer) and Min Nodes will represent X (Human)\n            */\n            // Creating the root maxnode for the Player O (Computer) \n            // Whole game will be monitored on behalf of main player which is O (Computer) here\n            // If in any node of the tree if O wins then node returns 1, if O lose then returns -1,\n            // If neither win/lose and there are moves to explore then it create new branch\n            // If neither win/lose and there are NO moves to explore then node will return 0\n\n/*\n\n            let maxnode = new MaxNode(temp, \"O\", \"O\", inf);\n            \n            //Accessing the best move from the decision tree\n            const updatedBoardai = [...maxnode.final_state]; \n\n            const count = turns + 1;\n            setTurns(count);\n            //Check for winner and update the score\n            const winner = checkForWinner(updatedBoardai);\n            setNext(false);\n            if (winner) {\n              if (winner === \"O\") {\n                let { o_score } = scores;\n                o_score += 1;\n                setScores({ ...scores, o_score });\n              } else {\n                let { x_score } = scores;\n                x_score += 1;\n                setScores({ ...scores, x_score });\n              }\n              setGameOver(true);\n              setTurns(1);\n              setXPlaying(true);\n              if(is_game_over === false && is_x_playing === false && !isEmpty(board) ){\n                alert(`Player - ${winner} won the round ;)OO`+board.toString());\n              }\n              setBoard(Array(9).fill(null));\n              setLastBoard(Array(9).fill(null));\n              \n              setTimeout(nextRound(), 1000);\n              return;\n            } else {\n              //check if all boxes are filled and there is draw\n              if (turns === 9)\n                if (is_game_over === false) {\n                  setTurns(1);\n                  setXPlaying(true);\n                  setGameOver(true);\n                  setBoard(Array(9).fill(null));\n                  setLastBoard(Array(9).fill(null));\n                  alert(`Draw :0AI`);\n                  setTimeout(nextRound(), 1000);\n                  return;\n                }\n            }\n\n            setBoard(updatedBoardai);\n            setTurns(turns + 1);\n\n            //Alternating the player\n            setXPlaying(!is_x_playing);\n            \n          }\n        }\n      }\n    }\n  };\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}