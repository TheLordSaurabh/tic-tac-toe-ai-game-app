{"ast":null,"code":"var _jsxFileName = \"/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ScoreBoard } from \"../components/ScoreBoard\";\nimport { NumberPlayer } from \"../components/NumberPlayer\";\nimport { Board } from \"../components/Board\";\nimport { RedoButton } from \"../components/RedoButton\";\nimport { ResetAndRestart } from \"../components/ResetAndRestart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const win_combinations = [[0, 1, 2], [0, 3, 6], [0, 4, 8], [6, 7, 8], [2, 5, 8], [3, 4, 5], [1, 4, 7], [2, 4, 6]];\n  function getOpponent(player) {\n    return player === \"X\" ? \"O\" : \"X\";\n  }\n  //Limits\n  const inf = 1000000000;\n  const ninf = -1000000000;\n  class MaxNode {\n    constructor(state, player, main_player) {\n      let parent_beta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : inf;\n      this.main_player = main_player;\n      this.parent_beta = parent_beta;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.alpha = ninf;\n      this.state = [...state]; //Deep Copy\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches(); //Tree is Created Here\n    }\n\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let nArr = [];\n      let arr = [...arry];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = [...nArr];\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.alpha = this.checkWin(this.state, this.main_player);\n        return this.alpha;\n      }\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current alpha is greater than the parent beta\n        if (this.parent_beta < this.alpha) {\n          return this.alpha;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          //Best Case Scenario\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === 1) {\n            this.alpha = 1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.alpha;\n          }\n          let minnode = new MinNode(temp, this.opponent, this.main_player, this.alpha);\n          if (minnode.beta > this.alpha) {\n            this.alpha = minnode.beta;\n            this.final_state = [...temp];\n          }\n          temp[i] = null; //Removing the introduced Move\n        }\n      }\n\n      return this.alpha;\n    }\n  }\n  class MinNode {\n    constructor(state, player, main_player) {\n      let parent_alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ninf;\n      this.main_player = main_player;\n      this.parent_alpha = parent_alpha;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.beta = inf;\n      this.state = [...state];\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches();\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let arr = [...arry];\n      let nArr = [];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = nArr;\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.beta = this.checkWin(this.state, this.main_player);\n        return this.beta;\n      }\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current beta is less than the parent alpha or alphas of all the alpha nodes\n        if (this.parent_alpha > this.beta) {\n          return this.beta;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === -1) {\n            this.beta = -1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.beta;\n          }\n          let maxnode = new MaxNode(temp, this.opponent, this.main_player, this.beta);\n          temp[i] = null; //Removing the introduced Move\n          if (maxnode.alpha < this.beta) {\n            this.beta = maxnode.alpha;\n            this.final_state = [...temp];\n          }\n        }\n      }\n      return this.beta;\n    }\n  }\n  const [is_x_playing, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({\n    x_score: 0,\n    o_score: 0\n  });\n  const [is_game_over, setGameOver] = useState(false);\n  const [turns, setTurns] = useState(1);\n  const [last_board, setLastBoard] = useState(Array(9).fill(null));\n  const [is_one_player, setOnePlayer] = useState(false);\n  const [next, setNext] = useState(false);\n  const mainBoardHandling = boxIdx => {\n    //2-Player Game\n    if (is_one_player === false) {\n      setLastBoard(board);\n      // Update the board\n      const updatedBoard = board.map((value, idx) => {\n        if (idx === boxIdx) {\n          return is_x_playing ? \"X\" : \"O\";\n        } else {\n          return value;\n        }\n      });\n\n      //Check for winner and update the score\n      let winner = checkForWinner(updatedBoard);\n      if (winner) {\n        if (winner === \"O\") {\n          let {\n            o_score\n          } = scores;\n          o_score += 1;\n          setScores({\n            ...scores,\n            o_score\n          });\n        } else {\n          let {\n            x_score\n          } = scores;\n          x_score += 1;\n          setScores({\n            ...scores,\n            x_score\n          });\n        }\n        alert(`Player - ${winner} won the round ;)`);\n        //if(is_one_player === true) setXPlaying(true);\n        setTimeout(nextRound(), 3000);\n        return;\n      } else {\n        //check if all boxes are filled and there is draw\n        if (turns === 9) if (is_game_over === false) {\n          setTurns(1);\n          //if(is_one_player === true) setXPlaying(true);\n          setGameOver(true);\n          alert(`Draw :0`);\n          setTimeout(nextRound(), 3000);\n          return;\n        }\n      }\n      setBoard(updatedBoard);\n      const count = turns + 1;\n      setTurns(count);\n\n      //Alternating the player\n      setXPlaying(!is_x_playing);\n    }\n    //1-Player Game (Human Vs AI)\n    else {\n      if (is_game_over === false) {\n        //Human (X's Turn)\n        if (is_x_playing === true) {\n          setLastBoard(board);\n          // Update the board\n          const updatedBoard = board.map((value, idx) => {\n            if (idx === boxIdx) {\n              return is_x_playing ? \"X\" : \"O\";\n            } else {\n              return value;\n            }\n          });\n\n          //Check for winner and update the score\n          let winner = checkForWinner(updatedBoard);\n          if (winner) {\n            if (winner === \"O\") {\n              let {\n                o_score\n              } = scores;\n              o_score += 1;\n              setScores({\n                ...scores,\n                o_score\n              });\n            } else {\n              let {\n                x_score\n              } = scores;\n              x_score += 1;\n              setScores({\n                ...scores,\n                x_score\n              });\n            }\n            alert(`Player - ${winner} won the round ;) XX`);\n            setTurns(1);\n            setGameOver(true);\n            setXPlaying(true);\n            setTimeout(nextRound(), 1000);\n            return;\n          } else {\n            //check if all boxes are filled and there is draw\n            if (turns === 9) if (is_game_over === false) {\n              setTurns(1);\n              setXPlaying(true);\n              setGameOver(true);\n              alert(`Draw :0`);\n              setTimeout(nextRound(), 1000);\n              return;\n            }\n          }\n          setBoard(updatedBoard);\n          const count = turns + 1;\n          setTurns(count);\n\n          //Alternating the player\n          setXPlaying(!is_x_playing);\n        } else {\n          //AI's Turn\n          if (turns !== 9 && is_x_playing === false) {\n            //Getting the current game configuration/state or tic-tac-toe board matrix\n            let temp = [...board];\n\n            //Create Game Search Tree - MiniMax Algorithm (Alpha-Beta Pruning)\n            /* O (AI) is the main player here, and also the root maxnode will play on behalf of Player O\n              In Tree, Max Nodes will be player O (Computer) and Min Nodes will represent X (Human)\n            */\n            // Creating the root maxnode for the Player O (Computer) \n            // Whole game will be monitored on behalf of main player which is O (Computer) here\n            // If in any node of the tree if O wins then node returns 1, if O lose then returns -1,\n            // If neither win/lose and there are moves to explore then it create new branch\n            // If neither win/lose and there are NO moves to explore then node will return 0\n\n            let maxnode = new MaxNode(temp, \"O\", \"O\", inf);\n\n            //Accessing the best move from the decision tree\n            const updatedBoardai = [...maxnode.final_state];\n            const count = turns + 1;\n            setTurns(count);\n\n            //Check for winner and update the score\n            const winner = checkForWinner(updatedBoardai);\n            if (winner) {\n              if (winner === \"O\") {\n                let {\n                  o_score\n                } = scores;\n                o_score += 1;\n                setScores({\n                  ...scores,\n                  o_score\n                });\n              } else {\n                let {\n                  x_score\n                } = scores;\n                x_score += 1;\n                setScores({\n                  ...scores,\n                  x_score\n                });\n              }\n              alert(`Player - ${winner} won the round ;)OO`);\n              setTurns(1);\n              setGameOver(true);\n              setXPlaying(true);\n              s;\n              setTimeout(nextRound(), 1000);\n              return;\n            } else {\n              //check if all boxes are filled and there is draw\n              if (turns === 9) if (is_game_over === false) {\n                setTurns(1);\n                setXPlaying(true);\n                setGameOver(true);\n                alert(`Draw :0AI`);\n                setTimeout(nextRound(), 1000);\n                return;\n              }\n            }\n            setBoard(updatedBoardai);\n            setTurns(turns + 1);\n\n            //Alternating the player\n            setXPlaying(!is_x_playing);\n          }\n        }\n      }\n    }\n  };\n  const allEmpty = () => {\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === \"X\" || board[i] === \"O\") {\n        return false;\n      }\n    }\n    return true;\n  };\n  const equalArray = (array1, array2) => {\n    if (!(array1.length === array2.length)) {\n      return false;\n    }\n    for (let i = 0; i < array1.length; i++) {\n      if (!(array1[i] === array2[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const restartGame = () => {\n    let conf_msg = \"Do you want to restart the game??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    //if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n    setScores({\n      x_score: 0,\n      o_score: 0\n    });\n  };\n  const resetBoard = () => {\n    let conf_msg = \"Do you want to reset the Board??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    //if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n  const nextRound = () => {\n    setTurns(1);\n    //if (is_one_player === true) setXPlaying(true);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n  const checkForWinner = board => {\n    for (let i = 0; i < win_combinations.length; i++) {\n      const [x, y, z] = win_combinations[i];\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setTurns(1);\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n  const redo = () => {\n    if (!equalArray(board, last_board)) {\n      setTurns(turns - (is_one_player ? 2 : 1));\n      setBoard(last_board);\n      if (is_one_player === false) {\n        setOnePlayer(is_one_player);\n        if (!allEmpty()) setXPlaying(!is_x_playing);\n      }\n    }\n  };\n  const changeMode = () => {\n    setXPlaying(true);\n    setOnePlayer(!is_one_player);\n    restartGame();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(ScoreBoard, {\n      scores: scores,\n      is_x_playing: is_x_playing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NumberPlayer, {\n      mode: is_one_player,\n      changeMode: changeMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      one_player: is_one_player,\n      x_playing: is_x_playing,\n      game_over: is_game_over,\n      onClick: is_game_over ? resetBoard : mainBoardHandling\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RedoButton, {\n      redo: redo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResetAndRestart, {\n      resetBoard: resetBoard,\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 534,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"stxDLmCv0jqAAPQNkJdWmQ54qoc=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","ScoreBoard","NumberPlayer","Board","RedoButton","ResetAndRestart","jsxDEV","_jsxDEV","Home","_s","win_combinations","getOpponent","player","inf","ninf","MaxNode","constructor","state","main_player","parent_beta","arguments","length","undefined","opponent","alpha","final_state","Array","fill","n","createBranches","copyArray","array1","array2","i","allDone","checkWin","arry","nArr","arr","push","splice","temp","win_","minnode","MinNode","beta","parent_alpha","maxnode","is_x_playing","setXPlaying","board","setBoard","scores","setScores","x_score","o_score","is_game_over","setGameOver","turns","setTurns","last_board","setLastBoard","is_one_player","setOnePlayer","next","setNext","mainBoardHandling","boxIdx","updatedBoard","map","value","idx","winner","checkForWinner","alert","setTimeout","nextRound","count","updatedBoardai","s","allEmpty","equalArray","restartGame","conf_msg","window","confirm","resetBoard","x","y","z","redo","changeMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mode","one_player","x_playing","game_over","onClick","_c","$RefreshReg$"],"sources":["/Users/saurabhgupta/Desktop/tic-tac-toe-ai-game-app/src/pages/Home.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { ScoreBoard } from \"../components/ScoreBoard\";\nimport { NumberPlayer } from \"../components/NumberPlayer\";\nimport { Board } from \"../components/Board\";\nimport { RedoButton } from \"../components/RedoButton\";\nimport { ResetAndRestart } from \"../components/ResetAndRestart\";\nexport const Home = () => {\n  const win_combinations = [\n    [0, 1, 2],\n    [0, 3, 6],\n    [0, 4, 8],\n    [6, 7, 8],\n    [2, 5, 8],\n    [3, 4, 5],\n    [1, 4, 7],\n    [2, 4, 6]\n  ];\n\n  function getOpponent(player) {\n    return player === \"X\" ? \"O\" : \"X\";\n  }\n  //Limits\n  const inf = 1000000000;\n  const ninf = -1000000000;\n\n  class MaxNode {\n    constructor(state, player, main_player, parent_beta = inf) {\n      this.main_player = main_player;\n      this.parent_beta = parent_beta;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.alpha = ninf;\n      this.state = [...state];//Deep Copy\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches(); //Tree is Created Here\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let nArr = [];\n      let arr = [...arry];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = [...nArr];\n\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.alpha = this.checkWin(this.state, this.main_player);\n        return this.alpha;\n      }\n\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current alpha is greater than the parent beta\n        if (this.parent_beta < this.alpha) {\n          return this.alpha;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          //Best Case Scenario\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === 1) {\n            this.alpha = 1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.alpha;\n          }\n\n          let minnode = new MinNode(temp,this.opponent,this.main_player,this.alpha);\n\n          if (minnode.beta > this.alpha) {\n            this.alpha = minnode.beta;\n            this.final_state = [...temp];\n          }\n          temp[i] = null; //Removing the introduced Move\n        }\n      }\n      return this.alpha;\n    }\n  }\n\n  class MinNode {\n    constructor(state, player, main_player, parent_alpha = ninf) {\n      this.main_player = main_player;\n      this.parent_alpha = parent_alpha;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.beta = inf;\n      this.state = [...state];\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches();\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let arr = [...arry];\n      let nArr = [];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = nArr;\n\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.beta = this.checkWin(this.state, this.main_player);\n        return this.beta;\n      }\n\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current beta is less than the parent alpha or alphas of all the alpha nodes\n        if (this.parent_alpha > this.beta) {\n          return this.beta;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === -1) {\n            this.beta = -1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.beta;\n          }\n\n          let maxnode = new MaxNode(\n            temp,\n            this.opponent,\n            this.main_player,\n            this.beta\n          );\n\n          temp[i] = null; //Removing the introduced Move\n          if (maxnode.alpha < this.beta) {\n            this.beta = maxnode.alpha;\n            this.final_state = [...temp];\n          }\n        }\n      }\n      return this.beta;\n    }\n  }\n\n  const [is_x_playing, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({ x_score: 0, o_score: 0 });\n  const [is_game_over, setGameOver] = useState(false);\n  const [turns, setTurns] = useState(1);\n  const [last_board, setLastBoard] = useState(Array(9).fill(null));\n  const [is_one_player, setOnePlayer] = useState(false);\n  const [next, setNext] = useState(false);\n  const mainBoardHandling = (boxIdx) => {\n    //2-Player Game\n    if (is_one_player === false) {\n      setLastBoard(board);\n      // Update the board\n      const updatedBoard = board.map((value, idx) => {\n        if (idx === boxIdx) {\n          return is_x_playing ? \"X\" : \"O\";\n        } else {\n          return value;\n        }\n      });\n\n      //Check for winner and update the score\n      let winner = checkForWinner(updatedBoard);\n\n      if (winner) {\n        if (winner === \"O\") {\n          let { o_score } = scores;\n          o_score += 1;\n          setScores({ ...scores, o_score });\n        } else {\n          let { x_score } = scores;\n          x_score += 1;\n          setScores({ ...scores, x_score });\n        }\n        alert(`Player - ${winner} won the round ;)`);\n        //if(is_one_player === true) setXPlaying(true);\n        setTimeout(nextRound(), 3000);\n        return;\n      } else {\n        //check if all boxes are filled and there is draw\n        if (turns === 9)\n          if (is_game_over === false) {\n            setTurns(1);\n            //if(is_one_player === true) setXPlaying(true);\n            setGameOver(true);\n            alert(`Draw :0`);\n            setTimeout(nextRound(), 3000);\n            return;\n          }\n      }\n\n      setBoard(updatedBoard);\n      const count = turns + 1;\n      setTurns(count);\n\n      //Alternating the player\n      setXPlaying(!is_x_playing);\n    } \n    //1-Player Game (Human Vs AI)\n    else {\n      if(is_game_over === false){\n        //Human (X's Turn)\n        if (is_x_playing === true  ) {\n          setLastBoard(board);\n          // Update the board\n          const updatedBoard = board.map((value, idx) => {\n            if (idx === boxIdx) {\n              return is_x_playing ? \"X\" : \"O\";\n            } else {\n              return value;\n            }\n          });\n\n          //Check for winner and update the score\n          let winner = checkForWinner(updatedBoard);\n\n          if (winner) {\n            if (winner === \"O\") {\n              let { o_score } = scores;\n              o_score += 1;\n              setScores({ ...scores, o_score });\n            } else {\n              let { x_score } = scores;\n              x_score += 1;\n              setScores({ ...scores, x_score });\n            }\n            alert(`Player - ${winner} won the round ;) XX`);\n            setTurns(1);\n            setGameOver(true);\n            setXPlaying(true);\n            setTimeout(nextRound(), 1000);\n            return;\n          } else {\n            //check if all boxes are filled and there is draw\n            if (turns === 9)\n              if (is_game_over === false) {\n                setTurns(1);\n                setXPlaying(true);\n                setGameOver(true);\n                alert(`Draw :0`);\n                setTimeout(nextRound(), 1000);\n                return;\n              }\n          }\n\n          setBoard(updatedBoard);\n          const count = turns + 1;\n          setTurns(count);\n\n          //Alternating the player\n          setXPlaying(!is_x_playing);\n        } \n        \n        else {\n          //AI's Turn\n          if (turns !== 9 && is_x_playing === false) {\n            //Getting the current game configuration/state or tic-tac-toe board matrix\n            let temp = [...board];\n\n            //Create Game Search Tree - MiniMax Algorithm (Alpha-Beta Pruning)\n            /* O (AI) is the main player here, and also the root maxnode will play on behalf of Player O\n              In Tree, Max Nodes will be player O (Computer) and Min Nodes will represent X (Human)\n            */\n            // Creating the root maxnode for the Player O (Computer) \n            // Whole game will be monitored on behalf of main player which is O (Computer) here\n            // If in any node of the tree if O wins then node returns 1, if O lose then returns -1,\n            // If neither win/lose and there are moves to explore then it create new branch\n            // If neither win/lose and there are NO moves to explore then node will return 0\n\n\n\n            let maxnode = new MaxNode(temp, \"O\", \"O\", inf);\n            \n            //Accessing the best move from the decision tree\n            const updatedBoardai = [...maxnode.final_state]; \n\n            const count = turns + 1;\n            setTurns(count);\n\n            //Check for winner and update the score\n            const winner = checkForWinner(updatedBoardai);\n\n            if (winner) {\n              if (winner === \"O\") {\n                let { o_score } = scores;\n                o_score += 1;\n                setScores({ ...scores, o_score });\n              } else {\n                let { x_score } = scores;\n                x_score += 1;\n                setScores({ ...scores, x_score });\n              }\n              alert(`Player - ${winner} won the round ;)OO`);\n              setTurns(1);\n              setGameOver(true);\n              setXPlaying(true);\n              s\n              setTimeout(nextRound(), 1000);\n              return;\n            } else {\n              //check if all boxes are filled and there is draw\n              if (turns === 9)\n                if (is_game_over === false) {\n                  setTurns(1);\n                  setXPlaying(true);\n                  setGameOver(true);\n                  alert(`Draw :0AI`);\n                  setTimeout(nextRound(), 1000);\n                  return;\n                }\n            }\n\n            setBoard(updatedBoardai);\n\n            setTurns(turns + 1);\n\n            //Alternating the player\n            setXPlaying(!is_x_playing);\n          }\n        }\n      }\n    }\n  };\n\n  const allEmpty = () => {\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === \"X\" || board[i] === \"O\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const equalArray = (array1, array2) => {\n    if (!(array1.length === array2.length)) {\n      return false;\n    }\n\n    for (let i = 0; i < array1.length; i++) {\n      if (!(array1[i] === array2[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const restartGame = () => {\n    let conf_msg = \"Do you want to restart the game??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    //if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n    setScores({ x_score: 0, o_score: 0 });\n  };\n\n  const resetBoard = () => {\n    let conf_msg = \"Do you want to reset the Board??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    //if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n\n  const nextRound = () => {\n    setTurns(1);\n    //if (is_one_player === true) setXPlaying(true);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n\n  const checkForWinner = (board) => {\n    for (let i = 0; i < win_combinations.length; i++) {\n      const [x, y, z] = win_combinations[i];\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setTurns(1);\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n  const redo = () => {\n    if (!equalArray(board, last_board)) {\n      setTurns(turns - (is_one_player ? 2 : 1));\n      setBoard(last_board);\n      if (is_one_player === false) {\n        setOnePlayer(is_one_player);\n        if (!allEmpty()) setXPlaying(!is_x_playing);\n      }\n    }\n  };\n\n  const changeMode = () => {\n    setXPlaying(true);\n    setOnePlayer(!is_one_player);\n    restartGame();\n  };\n  return (\n    <div className=\"Home\">\n      <ScoreBoard scores={scores} is_x_playing={is_x_playing} />\n      <NumberPlayer mode={is_one_player} changeMode={changeMode} />\n      <Board\n        board={board}\n        one_player = {is_one_player}\n        x_playing = {is_x_playing}\n        game_over = {is_game_over}\n        onClick={is_game_over ? resetBoard : mainBoardHandling}\n      />\n      <RedoButton redo={redo} />\n      <ResetAndRestart resetBoard={resetBoard} restartGame={restartGame} />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}